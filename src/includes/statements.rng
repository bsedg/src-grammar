<grammar xmlns="http://relaxng.org/ns/structure/1.0" 
	 xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
	 ns="http://www.sdml.info/srcML/src" 
	 >

	 <a:documentation>
	RELAX NG schema for base definitions of srcML statements elements

	Brandon Sedgwick
	bmsedgwick@gmail.com
	2013
	 </a:documentation>

	 <define name="return">
	 	 <element name="return">
		 	  <text/> <!-- return -->
			  <ref name="expression"/>
			  <text/> <!-- ; -->
		 </element>
	 </define>

	   <a:documentation>
		Expression statement.

		cout  "Welcome to Lab 1" endl;

		<expr_stmt><expr><name>cout</name> &lt;&lt; "Welcome to Lab 1" &lt;&lt; <name>endl</name></expr>;</expr_stmt>

		cin distance1 distance2;
		<expr_stmt><expr><name>cin</name> &gt;&gt; <name>distance1</name> &gt;&gt; <name>distance2</name></expr>;</expr_stmt>
		total += numbers[j];
		<expr_stmt><expr><name>total</name> += <name><name>numbers</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
	  </a:documentation>
	   <define name="expression_statement">
			<element name="expr_stmt">
				 <ref name="expression"/>	
			</element>
	   </define>

	   <a:documentation>

		<expr>delete<index>[]</index> <name>ptr</name></expr>
	   </a:documentation>
	   <define name="expression">
	   	 <element name="expr">
		 	  <zeroOrMore>
				<optional><text/></optional>
				<choice>
					<!-- delete[] ptr -->
					<element name="index">
						 <text/>
					</element>
					<element name="name">
				   	<oneOrMore>
						<choice>
						<text/>
						<element name="name">
							 <text/>
						</element>
						<element name="index">
							 <text/>
							 <element name="expr">
								<choice>
									<element name="name">
								   		 <text/>
									</element>
									<text/>
								</choice>
							 </element>
							 <text/>
						</element>
						</choice>
				   	</oneOrMore>
				   </element>
				<text/>
				</choice>
			</zeroOrMore>
			<zeroOrMore>
				<choice>
					<ref name="function_call"/>
					<text/>
					<element name="name">
						 <text/>
					</element>
					<!-- <name><name>people</name><index>[<expr><name>i</name> -->
					<element name="name">
						 <element name="name">
						 	  <text/>
						 </element>
						 <element name="index">
						 	  <text/>
							  <ref name="expression"/>
						 </element>
						 <text/>
					</element>
				</choice>
			</zeroOrMore>
		</element>
		<text/>
	   </define>

	 <a:documentation>
		<decl_stmt><decl><type><name>int</name></type> <name>totalPay</name> =<init> <expr><name>payrate</name> * <name>hours</name></expr></init></decl>;</decl_stmt>
	</a:documentation>
	<define name="declarative_statement">
		<element name="decl_stmt">
			 <ref name="declaration"/>
		</element>
	</define>

	<a:documentation>
		<decl><type><name>int</name></type> <name>i</name>=<init><expr>0</expr></init></decl>
		<decl><type><name>double</name></type> <name>dm</name>, <name>dn</name></decl>

		<decl><type><name>double</name></type> <name><name>numbers</name>
			<index>[<expr><name>ARRAYLEN</name></expr>]</index></name>=
			<init> <expr><block>{<expr>0.0</expr>, <expr>1.1</expr>, <expr>2.2</expr>, 
			       <expr>3.3</expr>, <expr>4.4</expr>, <expr>5.5</expr>, <expr>6.6</expr>, 
			       <expr>7.7</expr>, <expr>8.8</expr>, <expr>9.9</expr>}</block></expr>
			</init>
		</decl>
		
		<decl><type><name>int</name></type> <name><name>ar</name>
			<index>[]</index><index>[<expr>4</expr>]</index></name></decl>

		<decl><type><name>const</name> <name>int</name> *</type></decl>

		<decl><type><name>int</name> *</type><name>element</name> =<init> 
			<expr>&amp;<name><name>seq</name><index>[<expr>0</expr>]</index>
			</name></expr></init></decl>
	</a:documentation>
	<define name="declaration">
		<element name="decl">
			 <element name="type">
			 	  <element name="name">
				  	   <text/>
				  </element>
				  <optional><text/></optional>
				  <optional>
					<element name="name">
				  	   <text/>
				  	</element>
				  </optional>
				  <!-- Pointer, *  -->
				  <optional><text/></optional> 
			</element>
			<zeroOrMore>
				<optional><text/></optional>
				<element name="name">
					 <text/>
					 <!-- double numbers[ARRAYLEN] = ...; 'numbers' is name element here -->
					 <optional>
						<element name="name">
							 <text/>
						</element>
					 </optional>
					 <!-- More than 1 for multidimensional arrays -->
					 <zeroOrMore>
						<!-- <index>[<expr><name>ARRAYLEN</name></expr>]</index> -->
						<element name="index">
							<text/>
							<!-- could just be a literal -->
							<optional>
							<element name="expr">
								 <choice>
									<text/>
									<element name="name">
								 		 <text/>
								 	</element>
								 </choice>
							</element>
							<optional><text/></optional>
							</optional>
						</element>
					 </zeroOrMore>
				</element>
				<text/>
				<optional>
					<element name="init">
						 <optional><text/></optional> <!-- no space between = and right side -->
					     	 <element name="expr">
					     	 <oneOrMore>
					         <choice>
							<text/>
							<ref name="function_call"/>
							<element name="name">
								 <text/>
							</element>
							<element name="name">
								 <element name="name">
								 	  <text/>
								 </element>
								 <element name="index">
								 	  <text/>
									  <element name="expr">
									  	   <choice>
											<text/>
											<element name="name">
									  	   	    <text/>
										   	</element>
										   </choice>
									  </element>
									  <text/>
								 </element>
								 <text/>
							</element>
							<!-- 
							Array declaration with values.
							double numbers[ARRAYLEN]= {0.0, 1.1, 
							       2.2,3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9};
							-->
							<element name="block">
								 <text/>
								 <oneOrMore>
									<element name="expr">
								 		 <text/>
								 	</element>
								 	<text/>
								 </oneOrMore>
							</element>
						 </choice>
					     	 </oneOrMore>
					     </element>
					</element>
					</optional> <!-- optional init for a declaration -->
			</zeroOrMore>
		</element>
		<text/>
	</define>
</grammar>