<grammar xmlns="http://relaxng.org/ns/structure/1.0" 
	 xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
	 ns="http://www.sdml.info/srcML/src"
	 >

	 <a:documentation>
	     RELAX NG schema for for loops

	     Brandon Sedgwick
	     bmsedgwick@gmail.com
	     2013
	 </a:documentation>

	 <a:documentation>

		<while>while<condition>(<expr><name>i</name> &lt;= <name>num</name></expr>)</condition> <block>{
         	   <expr_stmt><expr><name>cout</name> &lt;&lt; <name>i</name> &lt;&lt; " "</expr>;</expr_stmt>
        	   <expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
    		}</block></while>
	 </a:documentation>
	 <define name="while">
	 	 <element name="while">
		 	  <text/>
			  <element name="condition">
			  	   <text/>
				   <ref name="expression"/>
				   <text/>
			  </element>
			  <text/>
			  <element name="block">
			  	   <oneOrMore>
					<choice>
						<text/>
						<ref name="comment"/>
						<ref name="declarative_statement"/>
						<ref name="expression_statement"/>
						<ref name="if"/>
						<ref name="switch"/>
						<ref name="for"/>
						<ref name="while"/>
					</choice>
				   </oneOrMore>
			  </element>
		 </element>
	 </define>

         <define name="for">
	    <element name="for">
	    	     <text/>
		     <element name="init">
		     	      <choice>
				<ref name="declaration"/>
		     	      	<ref name="expression"/>
			      </choice>
			      <text/>
		     </element>
		     <element name="condition">
		     	      <element name="expr">
			      	       <element name="name">
				       		<text/>
				       </element>
				       <text/>
				       <element name="name">
				       		<text/>
				       </element>
				       <optional>
						<text/>
						<element name="name">
							 <text/>
						</element>
				       </optional>
				       <text/>
			      </element>
			      <text/>
		     </element>
		     <element name="incr">
		     	      <element name="expr">
			      	       <optional><text/></optional>
				       <element name="name">
				       		<text/>
				       </element>
			      	       <optional><text/></optional>

				       <!-- for (int i=m;i<n; i += step) ... 'i += step' -->
				       <optional>
					<element name="name">
						 <text/>
					</element>
				       </optional>

			      </element>
		     </element>
		     <text/>
		     <element name="block">
		     	      <text/>
			      <oneOrMore>
				<choice>
					<text/>
					<ref name="comment"/>
					<ref name="expression_statement"/>
					<ref name="declarative_statement"/>
					<ref name="for"/>
					<ref name="if"/>
				</choice>
			      </oneOrMore>
		     </element>
	    	     <optional><text/></optional>
	    </element>
	    <optional><text/></optional>
	 </define>

	 <define name="fordecl">
			      	<element name="decl">
			      	       <element name="type">
				       		<element name="name">
							 <text/>
						</element>
				       </element>
				       <text/>
				       <element name="name">
				       		<text/>
				 	</element>
				<text/>
				<element name="init">
				       		<element name="expr">
							 <optional><text/></optional>
							 <optional>
								<element name="name">
									 <text/>
								</element>
							 </optional>
							 <optional><text/></optional>
						</element>
				       </element>
			      </element>
	 </define>

	 <a:documentation>
		Do or do not, there is not try.

		<do>do <block>{
        	<expr_stmt><expr><name>num</name> = <call><name>input_an_int</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        	<expr_stmt><expr><name>sum</name> += <name>num</name></expr>;</expr_stmt>
    		}</block> while<condition>(<expr><name>num</name> != 0</expr>)</condition>;</do>
	 </a:documentation>
	 <define name="do">
	 	 <element name="do">
		 	  <text/>
			  <element name="block">
			  	   <text/>
				   <oneOrMore>
					<choice>
						<text/>
						<ref name="comment"/>
						<ref name="expression_statement"/>
						<ref name="declarative_statement"/>
					</choice>
				   </oneOrMore>
			  </element>
			  <text/> <!-- while -->
			  <element name="condition">
			  	 <text/> <!-- ( -->
				 <ref name="expression"/>
				 <text/> <!-- ) -->  
			  </element>
			  <text/>
		 </element>
	 </define>
</grammar>
